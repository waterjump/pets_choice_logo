// Generated by CoffeeScript 2.2.3
(function() {
  var myp5, petsChoiceLogo, scale, terrain, terrainDepth, terrainWidth, xoff, yoff;

  petsChoiceLogo = void 0;

  scale = 40;

  terrainWidth = 80;

  terrainDepth = 29;

  xoff = 0.0;

  yoff = 0.0;

  terrain = [];

  myp5 = new p5(function(p) {
    var i, ref, y, yTerrain;
    // calculate terrain from Perlin noise
    yTerrain = function(y) {
      var arrayRow, i, ref, x, xTerrain;
      xTerrain = function(x) {
        arrayRow.push(p.map(p.noise(xoff, yoff), 0, 1, -400, 300));
        xoff += .05;
      };
      arrayRow = [];
      xoff = 0.0;
      for (x = i = 0, ref = terrainWidth; (0 <= ref ? i <= ref : i >= ref); x = 0 <= ref ? ++i : --i) {
        xTerrain(x);
      }
      xoff = 0.0;
      terrain.push(arrayRow);
      yoff += .05;
    };
    for (y = i = 0, ref = terrainDepth; (0 <= ref ? i <= ref : i >= ref); y = 0 <= ref ? ++i : --i) {
      yTerrain(y);
    }
    p.preload = function() {
      petsChoiceLogo = p.loadImage('pets_choice_berlin_logo_black_bg.png');
    };
    p.setup = function() {
      p.frameRate(30);
      return p.createCanvas(1280, 720, p.WEBGL);
    };
    return p.draw = function() {
      var foo, j, k, newRow, ref1, ref2, singleTerrain, x;
      p.background(30);
      terrain.pop();
      // calculate terrain from Perlin noise
      singleTerrain = function(x) {
        newRow.push(p.map(p.noise(xoff, yoff), 0, 1, -400, 300));
        xoff += .05;
      };
      newRow = [];
      xoff = 0.0;
      for (x = j = 0, ref1 = terrainWidth; (0 <= ref1 ? j <= ref1 : j >= ref1); x = 0 <= ref1 ? ++j : --j) {
        singleTerrain(x);
      }
      xoff = 0.0;
      terrain.unshift(newRow);
      p.push();
      foo = function(y) {
        var baz;
        baz = function(x) {
          // p.beginShape()
          p.vertex(x * scale, y * scale, terrain[y][x]);
          p.vertex(x * scale, (y + 1) * scale, terrain[y + 1][x]);
        };
        // p.vertex((x + 1) * scale, y * scale, terrain[y][x + 1])
        // p.endShape(p.CLOSE)
        p.beginShape(p.TRIANGLE_STRIP);
        x = 0;
        while (x < terrainWidth - 1) {
          p.vertex(x * scale, y * scale, terrain[y][x]);
          p.vertex(x * scale, (y + 1) * scale, terrain[y + 1][x]);
          x++;
        }
        // baz x for x in [0 .. terrainWidth]
        p.endShape();
      };
      p.stroke(255);
      // p.noFill() # (0, 0, 0)
      p.strokeWeight(1);
      p.translate(-1500, 0, -1000);
      p.rotateX(p.PI / 2.5);
      for (y = k = 0, ref2 = terrainDepth - 1; (0 <= ref2 ? k <= ref2 : k >= ref2); y = 0 <= ref2 ? ++k : --k) {
        foo(y);
      }
      p.pop();
      yoff += 0.05;
      p.push();
      // p.texture(petsChoiceLogo)
      p.stroke(255);
      p.directionalLight(255, 255, 255, -1, 1, -1);
      p.directionalLight(0, 0, 40, 1, -1, -1);
      p.translate(200, 0);
      // p.rotateY(p.frameCount * 0.012)
      p.rotateZ(p.frameCount * 0.01);
      p.box(200);
      p.pop();
    };
  });

}).call(this);
